---
extends:
  - next/core-web-vitals
  - 'plugin:react/recommended'

# Parser Options
# parser: '@typescript-eslint/parser'
parserOptions:
  ecmaVersion: 2020
  sourceType: module
  allowImportExportEverywhere: true

# Environment Options
env:
  es6: true
  browser: true
  node: true

# Globals
globals:
  cohesion: readonly
  monarch: readonly
  ANSWERS: readonly
  s_dtm: readonly
  _Tagular: readonly
  tagular: readonly
  fuse: readonly

# Plugins #
plugins:
  - import

# Rules
rules:

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  #
  # Possible Errors
  #
  # for-direction: enforce "for" loop update clause moving the counter in the right direction.
  # getter-return: enforce `return` statements in getters
  # no-async-promise-executor: disallow using an async function as a Promise executor
  # no-await-in-loop: disallow `await` inside of loops
  # no-compare-neg-zero: disallow comparing against -0
  # no-cond-assign: disallow assignment operators in conditional expressions
  # no-console: disallow the use of `console`
  # no-constant-condition: disallow constant expressions in conditions
  # no-control-regex: disallow control characters in regular expressions
  # no-debugger: disallow the use of `debugger`
  # no-dupe-args: disallow duplicate arguments in `function` definitions
  # no-dupe-else-if: disallow duplicate conditions in if-else-if chains
  # no-dupe-keys: disallow duplicate keys in object literals
  # no-duplicate-case: disallow duplicate case labels
  # no-empty: disallow empty block statements
  # no-empty-character-class: disallow empty character classes in regular expressions
  # no-ex-assign: disallow reassigning exceptions in `catch` clauses
  # no-extra-boolean-cast: disallow unnecessary boolean casts
  # no-extra-parens: disallow unnecessary parentheses
  # no-extra-semi: disallow unnecessary semicolons
  # no-func-assign: disallow reassigning `function` declarations
  # no-import-assign: disallow assigning to imported bindings
  # no-inner-declarations: disallow variable or `function` declarations in nested blocks
  # no-invalid-regexp: disallow invalid regular expression strings in `RegExp` constructors
  # no-irregular-whitespace: disallow irregular whitespace
  # no-misleading-character-class: disallow characters which are made with multiple code points in character class syntax
  # no-obj-calls: disallow calling global object properties as functions
  # no-prototype-builtins: disallow calling some `Object.prototype` methods directly on objects
  # no-regex-spaces: disallow multiple spaces in regular expressions
  # no-setter-return: disallow returning values from setters
  # no-sparse-arrays: disallow sparse arrays
  # no-template-curly-in-string: disallow template literal placeholder syntax in regular strings
  # no-unexpected-multiline: disallow confusing multiline expressions
  # no-unreachable: disallow unreachable code after `return`, `throw`, `continue`, and `break` statements
  # no-unsafe-finally: disallow control flow statements in `finally` blocks
  # no-unsafe-negation: disallow negating the left operand of relational operators
  # no-useless-backreference: disallow useless backreferences in regular expressions
  # require-atomic-updates: disallow assignments that can lead to race conditions due to usage of `await` or `yield`
  # use-isnan: require calls to `isNaN()` when checking for `NaN`
  # valid-typeof: enforce comparing `typeof` expressions against valid strings
  #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  for-direction: error
  getter-return: [ error, {
    allowImplicit: true
  } ]
  no-async-promise-executor: error
  no-await-in-loop: error
  no-compare-neg-zero: error
  no-cond-assign: [ error, always ]
  no-console: off
  no-constant-condition: warn
  no-control-regex: error
  no-debugger: error
  no-dupe-args: error
  no-dupe-else-if: off
  no-dupe-keys: error
  no-duplicate-case: error
  no-empty: error
  no-empty-character-class: error
  no-ex-assign: error
  no-extra-boolean-cast: error
  no-extra-parens: [ off, all, {
    conditionalAssign: true,
    nestedBinaryExpressions: false,
    returnAssign: false,
    ignoreJSX: all, # delegate to eslint-plugin-react
    enforceForArrowConditionals: false
  } ]
  no-extra-semi: error
  no-func-assign: error
  no-import-assign: off
  no-inner-declarations: error
  no-invalid-regexp: error
  no-irregular-whitespace: error
  no-misleading-character-class: error
  no-obj-calls: error
  no-prototype-builtins: off
  no-regex-spaces: error
  no-setter-return: off
  no-sparse-arrays: error
  no-template-curly-in-string: error
  no-unexpected-multiline: error
  no-unreachable: error
  no-unsafe-finally: error
  no-unsafe-negation: error
  no-negated-in-lhs: off
  # no-useless-backreference: off
  require-atomic-updates: off
  use-isnan: error
  valid-jsdoc: off
  valid-typeof: [ error, {
    requireStringLiterals: true
  } ]


  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  #
  # Best Practices
  #
  # accessor-pairs: enforce getter and setter pairs in objects and classes
  # array-callback-return: enforce `return` statements in callbacks of array methods
  # block-scoped-var: enforce the use of variables within the scope they are defined
  # class-methods-use-this: enforce that class methods utilize `this`
  # complexity: enforce a maximum cyclomatic complexity allowed in a program
  # consistent-return: require `return` statements to either always or never specify values
  # curly: enforce consistent brace style for all control statements
  # default-case: require `default` cases in `switch` statements
  # default-case-last: enforce default clauses in switch statements to be last
  # default-param-last: enforce default parameters to be last
  # dot-location: enforce consistent newlines before and after dots
  # dot-notation: enforce dot notation whenever possible
  # eqeqeq: require the use of `===` and `!==`
  # grouped-accessor-pairs: require grouped accessor pairs in object literals and classes
  # guard-for-in: require `for-in` loops to include an `if` statement
  # max-classes-per-file: enforce a maximum number of classes per file
  # no-alert: disallow the use of `alert`, `confirm`, and `prompt`
  # no-caller: disallow the use of `arguments.caller` or `arguments.callee`
  # no-case-declarations: disallow lexical declarations in case clauses
  # no-constructor-return: disallow returning value from constructor
  # no-div-regex: disallow division operators explicitly at the beginning of regular expressions
  # no-else-return: disallow `else` blocks after `return` statements in `if` statements
  # no-empty-function: disallow empty functions
  # no-empty-pattern: disallow empty destructuring patterns
  # no-eq-null: disallow `null` comparisons without type-checking operators
  # no-eval: disallow the use of `eval()`
  # no-extend-native: disallow extending native types
  # no-extra-bind: disallow unnecessary calls to `.bind()`
  # no-extra-label: disallow unnecessary labels
  # no-fallthrough: disallow fallthrough of `case` statements
  # no-floating-decimal: disallow leading or trailing decimal points in numeric literals
  # no-global-assign: disallow assignments to native objects or read-only global variables
  # no-implicit-coercion: disallow shorthand type conversions
  # no-implicit-globals: disallow declarations in the global scope
  # no-implied-eval: disallow the use of `eval()`-like methods
  # no-invalid-this: disallow `this` keywords outside of classes or class-like objects
  # no-iterator: disallow the use of the `__iterator__` property
  # no-labels: disallow labeled statements
  # no-lone-blocks: disallow unnecessary nested blocks
  # no-loop-func: disallow function declarations that contain unsafe references inside loop statements
  # no-magic-numbers: disallow magic numbers
  # no-multi-spaces: disallow multiple spaces
  # no-multi-str: disallow multiline strings
  # no-new: disallow `new` operators outside of assignments or comparisons
  # no-new-func: disallow `new` operators with the `Function` object
  # no-new-wrappers: disallow `new` operators with the `String`, `Number`, and `Boolean` objects
  # no-octal: disallow octal literals
  # no-octal-escape: disallow octal escape sequences in string literals
  # no-param-reassign: disallow reassigning `function` parameters
  # no-proto: disallow the use of the `__proto__` property
  # no-redeclare: disallow variable redeclaration
  # no-restricted-properties: disallow certain properties on certain objects
  # no-return-assign: disallow assignment operators in `return` statements
  # no-return-await: disallow unnecessary `return await`
  # no-script-url: disallow `javascript:` urls
  # no-self-assign: disallow assignments where both sides are exactly the same
  # no-self-compare: disallow comparisons where both sides are exactly the same
  # no-sequences: disallow comma operators
  # no-throw-literal: disallow throwing literals as exceptions
  # no-unmodified-loop-condition: disallow unmodified loop conditions
  # no-unused-expressions: disallow unused expressions
  # no-unused-labels: disallow unused labels
  # no-useless-call: disallow unnecessary calls to `.call()` and `.apply()`
  # no-useless-catch: disallow unnecessary `catch` clauses
  # no-useless-concat: disallow unnecessary concatenation of literals or template literals
  # no-useless-escape: disallow unnecessary escape characters
  # no-useless-return: disallow redundant return statements
  # no-void: disallow `void` operators
  # no-warning-comments: disallow specified warning terms in comments
  # no-with: disallow `with` statements
  # prefer-named-capture-group: enforce using named capture group in regular expression
  # prefer-promise-reject-errors: require using Error objects as Promise rejection reasons
  # prefer-regex-literals: disallow use of the `RegExp` constructor in favor of regular expression literals
  # radix: enforce the consistent use of the radix argument when using `parseInt()`
  # require-await: disallow async functions which have no `await` expression
  # require-unicode-regexp: enforce the use of `u` flag on RegExp
  # vars-on-top: require `var` declarations be placed at the top of their containing scope
  # wrap-iife: require parentheses around immediate `function` invocations
  # yoda: require or disallow "Yoda" conditions
  #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  accessor-pairs: off
  array-callback-return: [ error, {
    allowImplicit: true
  } ]
  block-scoped-var: error
  class-methods-use-this: off
  complexity: [ off, 11 ]
  consistent-return: off
  curly: [ error, multi-line ]
  default-case: [ error, {
    commentPattern: ^no default$
  } ]
  # default-case-last: off
  default-param-last: off
  dot-location: [ error, property ]
  dot-notation: [ error, {
    allowKeywords: true
  } ]
  eqeqeq: [ error, always, {
    null: ignore
  } ]
  grouped-accessor-pairs: off
  guard-for-in: error
  max-classes-per-file: [ error, 1 ]
  no-alert: warn
  no-caller: error
  no-case-declarations: error
  no-constructor-return: off
  no-div-regex: off
  no-else-return: [ error, {
    allowElseIf: false
  } ]
  no-empty-function: [ error, {
    allow: [
      arrowFunctions,
      functions,
      methods
    ]
  } ]
  no-empty-pattern: error
  no-eq-null: off
  no-eval: error
  no-extend-native: error
  no-extra-bind: error
  no-extra-label: error
  no-fallthrough: error
  no-floating-decimal: error
  no-global-assign: [ error, {
    exceptions: []
  } ]
  no-native-reassign: off
  no-implicit-coercion: [ off, {
    boolean: false,
    number: true,
    string: true,
    allow: []
  } ]
  no-implicit-globals: off
  no-implied-eval: error
  no-invalid-this: off
  no-iterator: error
  no-labels: [ error, {
    allowLoop: false,
    allowSwitch: false
  } ]
  no-lone-blocks: error
  no-loop-func: error
  no-magic-numbers: [ off, {
    ignore: [],
    ignoreArrayIndexes: true,
    enforceConst: true,
    detectObjects: false
  } ]
  no-multi-spaces: [ error, {
    ignoreEOLComments: false
  } ]
  no-multi-str: error
  no-new: off
  no-new-func: error
  no-new-wrappers: error
  no-octal: error
  no-octal-escape: error
  no-param-reassign: off
  no-proto: error
  no-redeclare: error
  no-restricted-properties: [ error, {
    object: arguments,
    property: callee,
    message: arguments.callee is deprecated,
  },
  {
    object: global,
    property: isFinite,
    message: Please use Number.isFinite instead,
  },
  {
    object: self,
    property: isFinite,
    message: Please use Number.isFinite instead,
  },
  {
    object: window,
    property: isFinite,
    message: Please use Number.isFinite instead,
  },
  {
    object: global,
    property: isNaN,
    message: Please use Number.isNaN instead,
  },
  {
    object: self,
    property: isNaN,
    message: Please use Number.isNaN instead,
  },
  {
    object: window,
    property: isNan,
    message: Please use Number.isNaN instead,
  },
  {
    object: __defineGetter__,
    message: Please use Object.defineProperty instead,
  },
  {
    object: __defineSetter__,
    message: Please use Object.defineProperty instead.
  },
  {
    object: Math,
    property: pow,
    message: Use the exponentiation operator (**) instead.
  } ]
  no-return-assign: [ error, always ]
  no-return-await: error
  no-script-url: error
  no-self-assign: [ error, {
    props: true
  } ]
  no-self-compare: error
  no-sequences: error
  no-throw-literal: error
  no-unmodified-loop-condition: off
  no-unused-expressions: [ error, {
    allowShortCircuit: false,
    allowTernary: false,
    allowTaggedTemplates: false
  } ]
  no-unused-labels: error
  no-useless-call: off
  no-useless-catch: error
  no-useless-concat: error
  no-useless-escape: error
  no-useless-return: error
  no-void: error
  no-warning-comments: [ off, {
    terms: [
      todo,
      fixme,
      xxx
    ],
    location: start
  } ]
  no-with: error
  prefer-named-capture-group: off
  prefer-promise-reject-errors: [ error, {
    allowEmptyReject: true
  } ]
  prefer-regex-literals: off
  radix: error
  require-await: off
  require-unicode-regexp: off
  vars-on-top: error
  wrap-iife: [ error, outside, {
    functionPrototypeMethods: false
  } ]
  yoda: error


  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  #
  # Strict Mode
  #
  # strict: require or disallow strict mode directives
  #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  strict: [ error, never ]


  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  #
  # Variables
  #
  # init-declarations: require or disallow initialization in variable declarations
  # no-delete-var: disallow deleting variables
  # no-label-var: disallow labels that share a name with a variable
  # no-restricted-globals: disallow specified global variables
  # no-shadow: disallow variable declarations from shadowing variables declared in the outer scope
  # no-shadow-restricted-names: disallow identifiers from shadowing restricted names
  # no-undef: disallow the use of undeclared variables unless mentioned in `/*global */` comments
  # no-undef-init: disallow initializing variables to `undefined`
  # no-undefined: disallow the use of `undefined` as an identifier
  # no-unused-vars: disallow unused variables
  # no-use-before-define: disallow the use of variables before they are defined
  #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  init-declarations: off
  no-catch-shadown: off
  no-delete-var: error
  no-label-var: error
  no-restricted-globals: [ error, isFinite, isNaN ]
  no-shadow: error
  no-shadow-restricted-names: error
  no-undef: error
  no-undef-init: error
  no-undefined: off
  no-unused-vars: [ error, {
    vars: all,
    args: after-used,
    ignoreRestSiblings: true
  } ]
  no-use-before-define: [ error, {
    functions: true,
    classes: true,
    variables: true
  } ]


  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  #
  # Stylistic Issues
  #
  # array-bracket-newline: enforce linebreaks after opening and before closing array brackets
  # array-bracket-spacing: enforce consistent spacing inside array brackets
  # array-element-newline: enforce line breaks after each array element
  # block-spacing: disallow or enforce spaces inside of blocks after opening block and before closing block
  # brace-style: enforce consistent brace style for blocks
  # camelcase: enforce camelcase naming convention
  # capitalized-comments: enforce or disallow capitalization of the first letter of a comment
  # comma-dangle: require or disallow trailing commas
  # comma-spacing: enforce consistent spacing before and after commas
  # comma-style: enforce consistent comma style
  # computed-property-spacing: enforce consistent spacing inside computed property brackets
  # consistent-this: enforce consistent naming when capturing the current execution context
  # eol-last: require or disallow newline at the end of files
  # func-call-spacing: require or disallow spacing between function identifiers and their invocations
  # func-name-matching: require function names to match the name of the variable or property to which they are assigned
  # func-names: require or disallow named `function` expressions
  # func-style: enforce the consistent use of either `function` declarations or expressions
  # function-call-argument-newline: enforce line breaks between arguments of a function call
  # function-paren-newline: enforce consistent line breaks inside function parentheses
  # id-blacklist: disallow specified identifiers
  # id-length: enforce minimum and maximum identifier lengths
  # id-match: require identifiers to match a specified regular expression
  # implicit-arrow-linebreak: enforce the location of arrow function bodies
  # indent: enforce consistent indentation
  # jsx-quotes: enforce the consistent use of either double or single quotes in JSX attributes
  # key-spacing: enforce consistent spacing between keys and values in object literal properties
  # keyword-spacing: enforce consistent spacing before and after keywords
  # line-comment-position: enforce position of line comments
  # linebreak-style: enforce consistent linebreak style
  # lines-around-comment: require empty lines around comments
  # lines-between-class-members: require or disallow an empty line between class members
  # max-depth: enforce a maximum depth that blocks can be nested
  # max-len: enforce a maximum line length
  # max-lines: enforce a maximum number of lines per file
  # max-lines-per-function: enforce a maximum number of line of code in a function
  # max-nested-callbacks: enforce a maximum depth that callbacks can be nested
  # max-params: enforce a maximum number of parameters in function definitions
  # max-statements: enforce a maximum number of statements allowed in function blocks
  # max-statements-per-line: enforce a maximum number of statements allowed per line
  # multiline-comment-style: enforce a particular style for multiline comments
  # multiline-ternary: enforce newlines between operands of ternary expressions
  # new-cap: require constructor names to begin with a capital letter
  # new-parens: enforce or disallow parentheses when invoking a constructor with no arguments
  # newline-per-chained-call: require a newline after each call in a method chain
  # no-array-constructor: disallow `Array` constructors
  # no-bitwise: disallow bitwise operators
  # no-continue: disallow `continue` statements
  # no-inline-comments: disallow inline comments after code
  # no-lonely-if: disallow `if` statements as the only statement in `else` blocks
  # no-mixed-operators: disallow mixed binary operators
  # no-mixed-spaces-and-tabs: disallow mixed spaces and tabs for indentation
  # no-multi-assign: disallow use of chained assignment expressions
  # no-multiple-empty-lines: disallow multiple empty lines
  # no-negated-condition: disallow negated conditions
  # no-nested-ternary: disallow nested ternary expressions
  # no-new-object: disallow `Object` constructors
  # no-plusplus: disallow the unary operators `++` and `--`
  # no-restricted-syntax: disallow specified syntax
  # no-tabs: disallow all tabs
  # no-ternary: disallow ternary operators
  # no-trailing-spaces: disallow trailing whitespace at the end of lines
  # no-underscore-dangle: disallow dangling underscores in identifiers
  # no-unneeded-ternary: disallow ternary operators when simpler alternatives exist
  # no-whitespace-before-property: disallow whitespace before properties
  # nonblock-statement-body-position: enforce the location of single-line statements
  # object-curly-newline: enforce consistent line breaks inside braces
  # object-curly-spacing: enforce consistent spacing inside braces
  # object-property-newline: enforce placing object properties on separate lines
  # one-var: enforce variables to be declared either together or separately in functions
  # one-var-declaration-per-line: require or disallow newlines around variable declarations
  # operator-assignment: require or disallow assignment operator shorthand where possible
  # operator-linebreak: enforce consistent linebreak style for operators
  # padded-blocks: require or disallow padding within blocks
  # padding-line-between-statements: require or disallow padding lines between statements
  # prefer-exponentiation-operator: disallow the use of `Math.pow` in favor of the `**` operator
  # prefer-object-spread: disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead.
  # quote-props: require quotes around object literal property names
  # quotes: enforce the consistent use of either backticks, double, or single quotes
  # semi: require or disallow semicolons instead of ASI
  # semi-spacing: enforce consistent spacing before and after semicolons
  # semi-style: enforce location of semicolons
  # sort-keys: require object keys to be sorted
  # sort-vars: require variables within the same declaration block to be sorted
  # space-before-blocks: enforce consistent spacing before blocks
  # space-before-function-paren: enforce consistent spacing before `function` definition opening parenthesis
  # space-in-parens: enforce consistent spacing inside parentheses
  # space-infix-ops: require spacing around infix operators
  # space-unary-ops: enforce consistent spacing before or after unary operators
  # spaced-comment: enforce consistent spacing after the `//` or `/*` in a comment
  # switch-colon-spacing: enforce spacing around colons of switch statements
  # template-tag-spacing: require or disallow spacing between template tags and their literals
  # unicode-bom: require or disallow Unicode byte order mark (BOM)
  # wrap-regex: require parenthesis around regex literals
  #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  array-bracket-newline: [ off, consistent ] # object option alternative: { multiline: true, minItems: 3 }
  array-element-newline: [ off, {
    multiline: true,
    minItems: 3
  } ]
  array-bracket-spacing: [ error, always ]
  block-spacing: [ error, always ]
  brace-style: [ error, 1tbs, {
    allowSingleLine: true
  } ]
  camelcase: off
  capitalized-comments: [ off, never, {
    line: {
      ignorePattern: '.*',
      ignoreInlineComments: true,
      ignoreConsecutiveComments: true
    },
    block: {
      ignorePattern: '.*',
      ignoreInlineComments: true,
      ignoreConsecutiveComments: true
    }
  } ]
  comma-dangle: [ error, {
    arrays: never,
    objects: never,
    imports: never,
    exports: never,
    functions: never
  } ]
  comma-spacing: [ error, {
    before: false,
    after: true
  } ]
  comma-style: [ error, last, {
    exceptions: {
      ArrayExpression: false,
      ArrayPattern: false,
      ArrowFunctionExpression: false,
      CallExpression: false,
      FunctionDeclaration: false,
      FunctionExpression: false,
      ImportDeclaration: false,
      ObjectExpression: false,
      ObjectPattern: false,
      VariableDeclaration: false,
      NewExpression: false
    }
  } ]
  computed-property-spacing: [ error, always ]
  consistent-this: off
  eol-last: [ error, always ]
  function-call-argument-newline: [ off, consistent ]
  func-call-spacing: [ error, never ]
  func-name-matching: [ off, always, {
    includeCommonJSModuleExports: false,
    considerPropertyDescriptor: true
  } ]
  func-names: warn
  func-style: [ off, expression ]
  function-paren-newline: [ error, consistent ]
  # function-call-argument-newline: off
  id-blacklist: off
  id-length: off
  id-match: off
  implicit-arrow-linebreak: [ error, beside ]
  indent: [ error, 2, {
    SwitchCase: 1,
    VariableDeclarator: 1,
    outerIIFEBody: 1,
    # MemberExpression: null
    FunctionDeclaration: {
      parameters: 1,
      body: 1
    },
    FunctionExpression: {
      parameters: 1,
      body: 1
    },
    CallExpression: {
      arguments: 1
    },
    ArrayExpression: 1,
    ObjectExpression: 1,
    ImportDeclaration: 1,
    flatTernaryExpressions: false,
    ignoredNodes: [
      'JSXElement',
      'JSXElement > *',
      'JSXAttribute',
      'JSXIdentifier',
      'JSXNamespacedName',
      'JSXMemberExpression',
      'JSXSpreadAttribute',
      'JSXExpressionContainer',
      'JSXOpeningElement',
      'JSXClosingElement',
      'JSXFragment',
      'JSXOpeningFragment',
      'JSXClosingFragment',
      'JSXText',
      'JSXEmptyExpression',
      'JSXSpreadChild'
    ],
    ignoreComments: false
  } ]
  jsx-quotes: [ off, prefer-double ]
  key-spacing: [ error, {
    beforeColon: false,
    afterColon: true
  } ]
  keyword-spacing: [ error, {
    before: true,
    after: true,
    overrides: {
      return: {
        after: true
      },
      throw: {
        after: true
      },
      case: {
        after: true
      }
    }
  } ]
  line-comment-position: [ off, {
    position: above,
    ignorePattern: '',
    applyDefaultPatterns: true
  } ]
  linebreak-style: [ error, unix ]
  lines-between-class-members: [ error, always, {
    exceptAfterSingleLine: true
  } ]
  lines-around-comment: off
  lines-around-directive: [ error, {
    before: always,
    after: always
  } ]
  max-depth: [ off, 4 ]
  max-len: [ error, 500, 2, {
    ignoreUrls: true,
    ignoreComments: false,
    ignoreRegExpLiterals: true,
    ignoreStrings: true,
    ignoreTemplateLiterals: true
  } ]
  max-lines: [ off, {
    max: 300,
    skipBlankLines: true,
    skipComments: true
  } ]
  max-lines-per-function: [ off, {
    max: 50,
    skipBlankLines: true,
    skipComments: true,
    IIFEs: true
  } ]
  max-nested-callbacks: off
  max-params: [ off, 3 ]
  max-statements: [ off, 10 ]
  max-statements-per-line: [ off, {
    max: 1
  } ]
  multiline-comment-style: [ off, starred-block ]
  multiline-ternary: [ off, never ]
  new-cap: [ error, {
    newIsCap: true,
    newIsCapExceptions: [],
    capIsNew: false,
    capIsNewExceptions: [ 'Immutable.Map', 'Immutable.Set', 'Immutable.List' ]
  } ]
  new-parens: error
  newline-after-var: off
  newline-before-return: off
  newline-per-chained-call: [ error, {
    ignoreChainWithDepth: 4
  } ]
  no-array-constructor: error
  no-bitwise: error
  no-continue: error
  no-inline-comments: off
  no-lonely-if: error
  no-mixed-operators: [ error, {
    # the list of arthmetic groups disallows mixing `%` and `**`
    # with other arithmetic operators.
    groups: [
      ['%', '**'],
      ['%', '+'],
      ['%', '-'],
      ['%', '*'],
      ['%', '/'],
      ['/', '*'],
      ['&', '|', '<<', '>>', '>>>'],
      ['==', '!=', '===', '!=='],
      ['&&', '||'],
    ],
    allowSamePrecedence: false
  } ]
  no-mixed-spaces-and-tabs: error
  no-multi-assign: error
  no-multiple-empty-lines: [ error, {
    max: 3,
    maxBOF: 0,
    maxEOF: 0
  } ]
  no-negated-condition: off
  no-nested-ternary: off
  no-new-object: error
  no-plusplus: error
  no-restricted-syntax: [ error, {
    selector: 'ForInStatement',
    message: 'for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array.',
  },
  {
    selector: 'ForOfStatement',
    message: 'iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.',
  },
  {
    selector: 'LabeledStatement',
    message: 'Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand.',
  },
  {
    selector: 'WithStatement',
    message: '`with` is disallowed in strict mode because it makes code impossible to predict and optimize.',
  } ]
  no-spaced-func: error
  no-tabs: [ error, { allowIndentationTabs: true } ]
  no-ternary: off
  no-trailing-spaces: [ error, {
    skipBlankLines: false,
    ignoreComments: false
  } ]
  no-underscore-dangle: [ error, {
    allow: [ '_Cohesion' ],
    allowAfterThis: false,
    allowAfterSuper: false,
    enforceInMethodNames: true
  } ]
  no-unneeded-ternary: [ error, {
    defaultAssignment: false
  } ]
  no-whitespace-before-property: error
  nonblock-statement-body-position: [ error, beside, {
    overrides: {}
  } ]
  object-curly-spacing: [ error, always ]
  object-curly-newline: [ error, {
    ObjectExpression: {
      minProperties: 4,
      multiline: true,
      consistent: true
    },
    ObjectPattern: {
      minProperties: 4,
      multiline: true,
      consistent: true
    },
    ImportDeclaration: {
      minProperties: 4,
      multiline: true,
      consistent: true
    },
    ExportDeclaration: {
      minProperties: 4,
      multiline: true,
      consistent: true
    },
  } ]
  object-property-newline: [ error, {
    allowAllPropertiesOnSameLine: true
  } ]
  one-var: [ error, never ]
  one-var-declaration-per-line: [ error, always ]
  operator-assignment: [ error, always ]
  operator-linebreak: [ error, after, {
    overrides: {
      =: none
    }
  } ]
  padded-blocks: [ error, {
    blocks: never,
    classes: never,
    switches: never
  },
  {
    allowSingleLineBlocks: true
  } ]
  padding-line-between-statements: off
  prefer-exponentiation-operator: off
  prefer-object-spread: error
  quote-props: [ error, as-needed, {
    keywords: false,
    unnecessary: true,
    numbers: false
  } ]
  quotes: [ error, single, {
    avoidEscape: true
  } ]
  require-jsdoc: off
  semi: [ error, always ]
  semi-spacing: [ error, {
    before: false,
    after: true
  } ]
  semi-style: [ error, last ]
  sort-keys: [ off, asc, {
    caseSensitive: false,
    natural: true
  } ]
  sort-vars: off
  space-before-blocks: error
  space-before-function-paren: [ error, {
    anonymous: always,
    named: never,
    asyncArrow: always
  } ]
  space-in-parens: [ error, always ]
  space-infix-ops: error
  space-unary-ops: [ error, {
    words: true,
    nonwords: true,
    overrides: {

    }
  } ]
  spaced-comment: [ error, always, {
    line: {
      exceptions: ['-', '+'],
      markers: ['=', '!', '/'], # space here to support sprockets directives, slash for TS /// comments
    },
    block: {
      exceptions: ['-', '+'],
      markers: ['=', '!', ':', '::'], # space here to support sprockets directives and flow comment types
      balanced: true,
    }
  } ]
  switch-colon-spacing: [ error, {
    after: true,
    before: false
  } ]
  template-tag-spacing: [ error, never ]
  unicode-bom: [ error, never ]
  wrap-regex: off


  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  #
  # ECMAScript 6
  #
  # arrow-body-style: require braces around arrow function bodies
  # arrow-parens: require parentheses around arrow function arguments
  # arrow-spacing: enforce consistent spacing before and after the arrow in arrow functions
  # constructor-super: require `super()` calls in constructors
  # generator-star-spacing: enforce consistent spacing around `*` operators in generator functions
  # no-class-assign: disallow reassigning class members
  # no-confusing-arrow: disallow arrow functions where they could be confused with comparisons
  # no-const-assign: disallow reassigning `const` variables
  # no-dupe-class-members: disallow duplicate class members
  # no-duplicate-imports: disallow duplicate module imports
  # no-new-symbol: disallow `new` operators with the `Symbol` object
  # no-restricted-exports: disallow specified names in exports
  # no-restricted-imports: disallow specified modules when loaded by `import`
  # no-this-before-super: disallow `this`/`super` before calling `super()` in constructors
  # no-useless-computed-key: disallow unnecessary computed property keys in objects and classes
  # no-useless-constructor: disallow unnecessary constructors
  # no-useless-rename: disallow renaming import, export, and destructured assignments to the same name
  # no-var: require `let` or `const` instead of `var`
  # object-shorthand: require or disallow method and property shorthand syntax for object literals
  # prefer-arrow-callback: require using arrow functions for callbacks
  # prefer-const: require `const` declarations for variables that are never reassigned after declared
  # prefer-destructuring: require destructuring from arrays and/or objects
  # prefer-numeric-literals: disallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals
  # prefer-rest-params: require rest parameters instead of `arguments`
  # prefer-spread: require spread operators instead of `.apply()`
  # prefer-template: require template literals instead of string concatenation
  # require-yield: require generator functions to contain `yield`
  # rest-spread-spacing: enforce spacing between rest and spread operators and their expressions
  # sort-imports: enforce sorted import declarations within modules
  # symbol-description: require symbol descriptions
  # template-curly-spacing: require or disallow spacing around embedded expressions of template strings
  # yield-star-spacing: require or disallow spacing around the `*` in `yield*` expressions
  #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  arrow-body-style: [ error, as-needed, {
    requireReturnForObjectLiteral: false
  } ]
  arrow-parens: [ error, always ]
  arrow-spacing: [ error, {
    before: true,
    after: true
  } ]
  constructor-super: error
  generator-star-spacing: [ error, {
    before: false,
    after: true
  } ]
  no-class-assign: error
  no-confusing-arrow: [ error, {
    allowParens: true
  } ]
  no-const-assign: error
  no-dupe-class-members: error
  no-duplicate-imports: off
  no-new-symbol: error
  no-restricted-exports: [ off, {
    paths: [],
    patterns: []
  } ]
  no-this-before-super: error
  no-useless-computed-key: error
  no-useless-constructor: error
  no-useless-rename: [ error, {
    ignoreDestructuring: false,
    ignoreImport: false,
    ignoreExport: false
  } ]
  no-var: error
  object-shorthand: [ error, always, {
    ignoreConstructors: false,
    avoidQuotes: true
  } ]
  prefer-arrow-callback: [ error, {
    allowNamedFunctions: false,
    allowUnboundThis: true
  } ]
  prefer-const: [ error, {
    destructuring: any,
    ignoreReadBeforeAssign: true
  } ]
  prefer-destructuring: [ error, {
    VariableDeclarator: {
      array: false,
      object: true
    },
    AssignmentExpression: {
      array: true,
      object: false
    }
  },
  {
    enforceForRenamedProperties: false
  } ]
  prefer-numeric-literals: error
  prefer-reflect: off
  prefer-rest-params: error
  prefer-spread: error
  prefer-template: error
  require-yield: error
  rest-spread-spacing: [ error, never ]
  sort-imports: [ off, {
    ignoreCase: false,
    ignoreDeclarationSort: false,
    ignoreMemberSort: false,
    memberSyntaxSortOrder: [ none, all, multiple, single ]
  } ]
  symbol-description: error
  template-curly-spacing: [ error, always ]
  yield-star-spacing: [ error, after ]


  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  #
  # Import
  #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  # import/no-unresolved: [ error, {
  #   commonjs: true,
  #   caseSensitive: true
  # } ]
  # import/named: error
  # import/default: off
  # import/namespace: off
  # import/export: error
  # import/no-named-as-default: error
  # import/no-named-as-default-member: error
  # import/no-deprecated: off
  # import/no-extraneous-dependencies: [ error, {
  #   devDependencies: [
  #     'test/**',                        # tape, common npm pattern
  #     'tests/**',                       # also common npm pattern
  #     'spec/**',                        # mocha, rspec-like pattern
  #     '**/__tests__/**',                # jest pattern
  #     '**/__mocks__/**',                # jest pattern
  #     'test.{js,jsx}',                  # repos with a single test file
  #     'test-*.{js,jsx}',                # repos with multiple top-level test files
  #     '**/*{.,_}{test,spec}.{js,jsx}',  # tests where the extension or filename suffix denotes that it is a test
  #     '**/jest.config.js',              # jest config
  #     '**/jest.setup.js',               # jest setup
  #     '**/vue.config.js',               # vue-cli config
  #     '**/webpack.config.js',           # webpack config
  #     '**/webpack.config.*.js',         # webpack config
  #     '**/rollup.config.js',            # rollup config
  #     '**/rollup.config.*.js',          # rollup config
  #     '**/gulpfile.js',                 # gulp config
  #     '**/gulpfile.*.js',               # gulp config
  #     '**/Gruntfile{,.js}',             # grunt config
  #     '**/protractor.conf.js',          # protractor config
  #     '**/protractor.conf.*.js',        # protractor config
  #     '**/karma.conf.js'                # karma config
  #   ],
  #   optionalDependencies: false
  # } ]
  # import/no-mutable-exports: error
  # import/no-commonjs: off
  # import/no-amd: error
  # import/no-nodejs-modules: off
  # import/first: error
  # import/imports-first: off
  # import/no-duplicates: error
  # import/no-namespace: off
  import/extensions: off
  # import/order: [ error, {
  #   groups: [
  #     [ builtin, external, internal ]
  #   ]
  # } ]
  # import/newline-after-import: error
  # import/prefer-default-export: error
  # import/no-restricted-paths: off
  # import/max-dependencies: [ off, { max: 10 } ]
  # import/no-absolute-path: error
  # import/no-dynamic-require: error
  # import/no-internal-modules: [ off, {
  #   allow: []
  # } ]
  # import/unambiguous: off
  # import/no-webpack-loader-syntax: error
  # import/no-unassigned-import: off
  # import/no-named-default: error
  # import/no-anonymous-default-export: [ off, {
  #   allowArray: false,
  #   allowArrowFunction: false,
  #   allowAnonymousClass: false,
  #   allowAnonymousFunction: false,
  #   allowLiteral: false,
  #   allowObject: false,
  # } ]
  # import/exports-last: off
  # import/group-exports: off
  # import/no-default-export: off
  # import/no-named-export: off
  # import/no-self-import: error
  # import/no-cycle: [ error, {
  #   maxDepth: Infinity
  # } ]
  # import/no-useless-path-segments: [ error, {
  #   commonjs: true
  # } ]
  # import/dynamic-import-chunkname: [ off, {
  #   importFunctions: [],
  #   webpackChunknameFormat: '[0-9a-zA-Z-_/.]+'
  # } ]
  # import/no-relative-parent-imports: off
  # import/no-unused-modules: [ off, {
  #   ignoreExports: [],
  #   missingExports: true,
  #   unusedExports: true
  # } ]
  import/no-unresolved: off


  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  #
  # Node
  #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  callback-return: off
  global-require: error
  handle-callback-err: off
  no-buffer-constructor: error
  no-mixed-requires: [ off, false ]
  no-new-require: error
  no-path-concat: error
  no-process-env: off
  no-process-exit: off
  no-restricted-modules: off
  no-sync: off


  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  #
  # TypeScript
  #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  # "@typescript-eslint/no-namespace": off
  # "@typescript-eslint/camelcase": off
  # "@typescript-eslint/no-empty-function": off

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  #
  # React
  #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  react/jsx-curly-spacing: [ error, always ]
  react/react-in-jsx-scope: off
  react/prop-types: off
  react/no-unescaped-entities: off
